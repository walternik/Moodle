<?php
require_once("../../config.php");
require_once($CFG->dirroot.'/mod/facetoface/lib.php');
require_once($CFG->dirroot.'/local/pages/lib.php');
require_once('lib.php');

// Session variables from oauth2callback.php
$s = $_SESSION['sessionid'];
$action = $_SESSION['action'];
$f = $_SESSION['facetofaceid'];

// insert comes from mod\facetoface\attendees\event.php
// update comes from mod\facetoface\classes\form\event.php
// delete comes from mod\facetoface\events\confirm.php

if($action != 'delete') {
    $seminarevent = new \mod_facetoface\seminar_event($s);
    $seminar = $seminarevent->get_seminar();
    $cm = $seminar->get_coursemodule();

    $context = context_system::instance();

    require_login();

    $baseurl = new moodle_url('/local/googlecalendar/index.php', ['s' => $seminarevent->get_id()]);
    $PAGE->set_context($context);
    $PAGE->set_url($baseurl);

    $PAGE->set_cm($cm); // To see the blocks on the left
    $PAGE->set_pagelayout('base');
    $PAGE->set_title($seminar->get_name() . ': ' . get_string('eventdetails', 'mod_facetoface'));

    // Print page content.
    echo $OUTPUT->header();
    echo $OUTPUT->heading($seminar->get_name());
}

echo $OUTPUT->container_start('', 'google_calendar');

/////// GOOGLE CALENDAR START ///////
// The authorization code generated by the authorization server.
$code = optional_param('code', '', PARAM_RAW);

$client = getGoogleClient($code);
// Get the API client and construct the service object.
$service = new Google_Service_Calendar($client);

$eventid = 'google'.$s; ///// GOOGLE EVENT-ID
$assignid = $eventid . 'assign';  ///// GOOGLE EVENT assign-ID

if($action != 'delete') {
    ///////////////////
    // Seminar Event //
    ///////////////////
    
    // Start End
    $sessionid = $seminarevent->get_id(); // $sessionid == $s
    $sessiondate = get_session_dates($sessionid);
    $timezone = $sessiondate->sessiontimezone;
    if($timezone == '99') $timezone = core_date::get_user_timezone($USER);
    $timestart = $sessiondate->timestart;
    $timeend = $sessiondate->timefinish;
    $d_timestart = substr(date('c', $timestart), 0 , -6);
    $d_timeend = substr(date('c', $timeend), 0 , -6);

    // Summary
    $courseid = $seminar->get_course();
    $course = $DB->get_record('course', array('id' => $courseid));
    $cohort = get_cohort_by_courseid_and_sessiondate($courseid, $timestart);
    if($cohort) {
        $cohort_name = $cohort->name;
        $cohort_name_dash = '-'. $cohort->name;
    } else {
        $cohort_name = ''; //Session date not assigned
        $cohort_name_dash = '';
    }
    $defaultsummary = get_session_info_field($s, 'defaultsummary', true);
    if($defaultsummary != '') {
        //'[Seminar Activity Name]-[Course Name]-[Audience Name]'
        //$ori = array("[Seminar Activity Name]", "[Course Name]", "[Audience Name]");
        //$tar = array($seminar->get_name(), $course->fullname, $cohort_name);
        //$summary = str_replace($ori, $tar, $defaultsummary);
        $summary = $seminar->get_name() . '-' . $course->fullname . $cohort_name_dash;
    } else {
        $summary = $seminar->get_name() . '-' . $course->fullname . $cohort_name_dash;
    }
    $programid = get_program_course($courseid);
    $cohortid = isset($cohort) ? $cohort->id : 0;
    $progassignments = $DB->get_records('prog_assignment', array('programid' => $programid, 'assignmenttype' => 3, 'assignmenttypeid' => $cohortid));
    if(!empty($progassignments)) {
        $progassign = reset($progassignments);
        $timestart_assign = $progassign->assignduedate - 3600;
        $timeend_assign = $progassign->assignduedate;
        $d_timestart_assign = substr(date('c', $timestart_assign), 0 , -6);
        $d_timeend_assign = substr(date('c', $timeend_assign), 0 , -6);

        $diffhs = ($timeend_assign - $timestart) / (60 * 60);
    }

    // Description
    $description = get_session_info_field($s, 'defaultdescription', true);
    if($description == '') {
        $description = format_string($seminarevent->get_details());
    } else {
        //$description = str_replace("[48 hours]", $diffhs . ' hours', $description);
        // Room link
        $sdid = $sessiondate->id;
        $roomid = $DB->get_field('facetoface_room_dates', 'roomid', array('sessionsdateid' => $sdid));
        $url = new moodle_url('/mod/facetoface/reports/rooms.php', array('roomid' => $roomid, 'sdid' => $sdid, 'view' => '1'));
        $url = '<a href="'.$url.'" target="_blank">' . $url . '</a>';
        $description = str_replace("[session link]", $url, $description);
    }

    // Attendees
    $host_email = get_session_info_field($s, 'HostEmail');
    $session_attendees = get_session_attendees($sessionid);
    $attendees = array();
    foreach($session_attendees as $att) {
        $attendees[] = ['email' => $att->email];
    }
    if($host_email) {
        $attendees[] = ['email' => $host_email];
    }

    // Reminders
    $reminders = array();
    $email_reminder = get_session_info_field($s, 'emailreminder1', true);
    if($email_reminder == '') $email_reminder = 24 * 60;
    $reminders[] = array('method' => 'email', 'minutes' => $email_reminder);

    $email_reminder2 = get_session_info_field($s, 'emailreminder2', true);
    if($email_reminder2 != '') $reminders[] = array('method' => 'email', 'minutes' => $email_reminder2);

    $popup_reminder = get_session_info_field($s, 'popupreminder', true);
    if($popup_reminder == '') $popup_reminder = 10;
    $reminders[] = array('method' => 'popup', 'minutes' => $popup_reminder);

    $data = array(
        'id' => $eventid,
        'summary' => $summary,
        'description' => $description,
        'start' => array(
            'dateTime' => $d_timestart,
            'timeZone' => $timezone,
        ),
        'end' => array(
            'dateTime' => $d_timeend,
            'timeZone' => $timezone,
        ),
        'attendees' => $attendees,
        'reminders' => array(
            'useDefault' => FALSE,
            'overrides' => $reminders,
        ),
    );

    ///////////////////////////////
    // Assignment Due Date Event //
    ///////////////////////////////
    
    // Summary
    $summ_assign = 'Assignment Due: ' . $course->fullname . $cohort_name_dash;
    
    // Reminders
    $reminders = array();
    $email_reminder = get_session_info_field($s, 'assignemailreminder1', true);
    if($email_reminder == '') $email_reminder = 24 * 60;
    $reminders[] = array('method' => 'email', 'minutes' => $email_reminder);

    $email_reminder2 = get_session_info_field($s, 'assignemailreminder2', true);
    if($email_reminder2 != '') $reminders[] = array('method' => 'email', 'minutes' => $email_reminder2);

    $popup_reminder = get_session_info_field($s, 'assignpopupreminder', true);
    if($popup_reminder != '') $reminders[] = array('method' => 'popup', 'minutes' => $popup_reminder);

    // Description
    $activities = get_array_of_activities($courseid);
    $assigncm = 0;
    foreach($activities as $act) {
        if($act->mod=='assign' AND $act->visible==1) {
            $assigncm = $act->cm;
            break;
        }
    }
    $desc_assign = get_session_info_field($s, 'assigndescription', true);
    if($assigncm > 0) {
        $link_assign = $CFG->wwwroot . '/mod/assign/view.php?id=' . $assigncm;
        $desc_assign .= ' <a href="'.$link_assign.'" target="_blank">Link to the Assignment Activity</a>';
    }

    $data_assign = array(
        'id' => $assignid,
        'summary' => $summ_assign,
        'description' => $desc_assign,
        'start' => array(
            'dateTime' => $d_timestart_assign,
            'timeZone' => $timezone,
        ),
        'end' => array(
            'dateTime' => $d_timeend_assign,
            'timeZone' => $timezone,
        ),
        'attendees' => $attendees,
        'reminders' => array(
            'useDefault' => FALSE,
            'overrides' => $reminders,
        ),
    );
}
/*echo '<pre>';
print_r($data);
echo '</pre>';

echo '<br><br><pre>';
print_r($data_assign);
echo '</pre>';*/

$googlecalendar = new stdClass();
$googlecalendar->eventid = $eventid;
$googlecalendar_assign = new stdClass();
$googlecalendar_assign->eventid = $assignid;
if($action != 'delete') {
    $googlecalendar->summary = $summary;
    $googlecalendar->timestart = $d_timestart;
    $googlecalendar->timeend = $d_timeend;
    $googlecalendar->deleted = 0;

    $googlecalendar_assign->summary = $summ_assign;
    $googlecalendar_assign->timestart = $d_timestart_assign;
    $googlecalendar_assign->timeend = $d_timeend_assign;
    $googlecalendar_assign->deleted = 0;
}

$exists = $DB->get_record('googlecalendar_events', array('eventid' => $eventid));
$exists_assign = $DB->get_record('googlecalendar_events', array('eventid' => $assignid));

if($action == 'insert' && !$exists) {
    $event = new Google_Service_Calendar_Event($data);
    $event = $service->events->insert('primary', $event);
    $DB->insert_record('googlecalendar_events', $googlecalendar);

    $event_assign = new Google_Service_Calendar_Event($data_assign);
    $event = $service->events->insert('primary', $event_assign);
    $DB->insert_record('googlecalendar_events', $googlecalendar_assign);
}
if($action == 'insert' && $exists) {
    $event = $service->events->get('primary', $eventid);
}

if($action == 'delete' && $exists) {
    $googlecalendar->deleted = 1;
    $googlecalendar->id = $exists->id;
    $service->events->delete('primary', $eventid);
    $DB->update_record('googlecalendar_events', $googlecalendar);

    if($exists_assign) {
        $googlecalendar_assign->deleted = 1;
        $googlecalendar_assign->id = $exists_assign->id;
        $service->events->delete('primary', $assignid);
        $DB->update_record('googlecalendar_events', $googlecalendar_assign);
    }
}

if($action == 'update' && $exists) {
    $event = new Google_Service_Calendar_Event($data);
    $event = $service->events->update('primary', $eventid, $event);
    $googlecalendar->id = $exists->id;
    $DB->update_record('googlecalendar_events', $googlecalendar);

    if($exists_assign) {
        $event_assign = new Google_Service_Calendar_Event($data_assign);
        $event = $service->events->update('primary', $assignid, $event_assign);
        $googlecalendar_assign->id = $exists_assign->id;
        $DB->update_record('googlecalendar_events', $googlecalendar_assign);
    } else {
        $event_assign = new Google_Service_Calendar_Event($data_assign);
        $event = $service->events->insert('primary', $event_assign);
        $DB->insert_record('googlecalendar_events', $googlecalendar_assign);
    }
}

if($action != 'delete') {
    $back = new moodle_url('/mod/facetoface/attendees/event.php', ['s' => $seminarevent->get_id()]);
} else {
    $back = new moodle_url('/mod/facetoface/view.php', array('f' => $f));
}
if(isset($event->htmlLink)) {
    // Show event link
    echo '<a href="'.$event->htmlLink.'" target="_blank">View event on Google Calendar</a>';
} else {
    redirect($back);
}
echo "<br><br>";
/////// GOOGLE CALENDAR END ///////


echo $OUTPUT->single_button($back, 'Back to event details', 'get');

echo $OUTPUT->container_end();

echo $OUTPUT->footer();
?>